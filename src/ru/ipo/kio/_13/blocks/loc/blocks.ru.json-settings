{
    /*Первые несколько строчек текста необходимы всегда, они описывают заголовок задачи, тексты условия и помощи*/

    "title0": "Кран", /*Этот заголовок пишется вверху окна. Цифра 1 означает, что заголовок используется для первого уровня*/
        "statement0": <<<
            <p><i>Вы не раз видели работу подъемного крана. Однако в местах погрузки стандартных грузов обычно стоят краны «на двух ногах». Их называют козловыми. Термин происходит от простого устройства, которое называется «к’озлы»  – строительное приспособление для работы на небольшой высоте</i>.</p>
            <p>Ваша задача погрузить контейнеры на трейлер и снять все контейнеры с трейлера. Кран выполняет всего четыре команды: T – взять и поднять груз, P – опустить и положить груз, L –  сдвинуться на одну позицию влево или R –  вправо. Команды можно выполнять непосредственно нажимая на кнопки либо можно сначала набрать все команды, а потом посмотреть, как они будут выполняться. Это можно сделать в анимационном режиме или по шагам. Чем больше контейнеров будет перенесено в нужную часть, тем лучше. Если все контейнеры перенесены, то лучшим считается решение с меньшим числом шагов.</p>
    		<p>Лучшее решение сохраняется автоматически и к нему можно всегда вернуться, нажав кнопку загрузки рекорда.</p>
            <p><b>На заметку учителю</b>. Возможно, составление линейной программы управления краном будет у учеников первым программистским опытом. Воспользуйтесь аналогичным сюжетом для 2 уровня, в котором можно самим расставлять контейнеры, и предложите ребятам испытать одну и ту же программу на разных конфигурациях. Например, положите на все контейнеры и на пустые места по одному дополнительному контейнеру. Что произойдёт? А если положить новые контейнеры не сверху, а снизу? Обратите внимание учеников на то, что хорошая программа должна уметь решать не одну задачу, а много разных. Конфигурация контейнеров задаёт данные для программы, а последовательность нажатий клавиш – алгоритм её работы.</p>
    			>>>,
    	"help0":<<<
    	    <p>Кнопки для выполнения команд имеют понятные логотипы. При нажатии на них одновременно выполняются все действия, а в окне программы записывается последовательность выполненных команд. Эту программу можно «проиграть» повторно, используя режим анимации или по шагам (причем можно посмотреть выполнение шагов в обратном порядке). Если программа уже создана, то её можно продолжить нажатием кнопок действий. При этом новые команды всегда будут записываться в конец программы. Если нужно исправить программу, то часть команд, начиная с последней, можно стереть, используя кнопку отмены последней команды.</p>
    		<p>Любые решения можно сохранять и загружать по мере надобности (обычно этим не пользуются, так как рекорд запоминается автоматически, а лучшие решения всех задач также собираются вместе автоматически при нажатии кнопки сохранения лучших результатов и анкеты).</p>
    	>>>,
        "title1": "Кран-автомат", /*Этот заголовок пишется вверху окна. Цифра 1 означает, что заголовок используется для первого уровня*/
        "statement1": <<<
            <p><i>Вы, наверное, слышали про станки с ЧПУ (числовым программным управлением). Они позволяют запомнить много элементарных действий, а потом воспроизвести их многократно</i>. </p>
            <p>Ваша задача – составить программу для автоматически работающего крана с программным управлением, который используется для погрузки контейнеров. Нужно переложить контейнеры с погрузочной площадки на трейлер, а контейнеры, которые были на нем, перенести на площадку. Кран выполняет всего четыре команды: T – взять и поднять груз, P – опустить и положить груз, L –  сдвинуться на одну позицию влево или R –  вправо. Используя скобки, можно повторяющиеся действия записать короче. Например, запись 7R означает семь шагов вправо, запись 5(TRPR) – перемещение пяти контейнеров, стоящих через одного, на одну позицию вправо. Можно использовать и более сложные команды – вложенные циклы. Посмотрите, как будет работать программа 3(2(TRPR)3L).</p>
            <p>Программу можно запускать как в анимационном режиме, так и по шагам. Если понятно, как работает программа, то можно сразу посмотреть результат, нажав на кнопку мгновенного выполнения. Чем больше контейнеров будет перенесено в нужную часть, тем лучше. Если все контейнеры перенесены, то лучшим считается решение с меньшим числом команд в записи программы. Если и длина программ будет одинакова, то сравниваться решения будут по времени выполнения программы – числу шагов, сделанных краном.</p>
    		<p>Лучшее решение сохраняется автоматически и к нему можно всегда вернуться, нажав кнопку загрузки рекорда.</p>
    		<p><b>На заметку учителю</b>. Воспользуйтесь аналогичным сюжетом для 2 уровня, в котором можно самим расставлять контейнеры, и предложите ребятам найти «хорошие» конфигурации, на которых короткие циклические программы дают интересные результаты. Обратите внимание учеников на то, что реальные программы, как правило, являются циклическими. Одна из задач теории программирования стоит в том, чтобы доказать правильность работы циклических программ. Для этого ищут так называемый инвариант цикла – условие, которое остаётся справедливым как до, так и после выполнения цикла, в то время как конфигурация, к которой применяются команды, при каждом новом выполнении цикла меняется. Например, для циклической программы 5(TRPR) инвариантом является такое условие «контейнер под захватом переносится на одну позицию вправо, а захват устанавливается над следующей (справа) позицией».</p>
    			>>>,
    	"help1":<<<
    	    <p>Кнопки для выполнения команд имеют понятные логотипы. Программа имеет два режима: ручной и программный. В первом из них команды выполняются непосредственно при нажатии на кнопки действий. В программном режиме сначала пишется программа, в которой, кроме команд действий (T, P, R, L), используются скобки и числа, с помощью которых создаются циклические программы. Написанную программу можно выполнить, используя режим анимации или по шагам (причем выполнение шагов можно посмотреть и в обратном порядке). Если нужно исправить программу, то часть команд, начиная с последней, можно стереть, используя кнопку отмены последней команды. Также можно установить курсор в нужное место программы и внести новые команды.</p>
    		<p>Любые решения можно сохранять и загружать по мере надобности (обычно этим не пользуются, так как рекорд запоминается автоматически, а лучшие решения всех задач также собираются вместе автоматически при нажатии кнопки сохранения лучших результатов и анкеты).</p>
    	>>>,
    	"title2": "Погрузка контейнеров",
    	"statement2": <<<
            <p><i>Вы, наверное, слышали про станки с ЧПУ (числовым программным управлением). Они позволяют запомнить много элементарных действий, а потом воспроизвести их многократно</i>. </p>
            <p>Ваша задача – расставить 10 красных и/или синих контейнеров на площадке и 10 зеленых и/или жёлтых на трейлере и составить как можно более короткую программу управления краном для переноса всех контейнеров, стоящих на площадке, на трейлер, а контейнеров с трейлера – на площадку (разные цвета сохранены для удобства слежения за погрузкой-разгрузкой).</p>
    		<p>Кран выполняет всего четыре команды: T – взять и поднять груз, P – опустить и положить груз, L –  сдвинуться на одну позицию влево или R –  вправо. Используя скобки, можно повторяющиеся действия записать короче. Например, запись 7R означает семь шагов вправо, запись 5(TRPR) – перемещение пяти контейнеров, стоящих через одного, на одну позицию вправо. Можно использовать и более сложные команды – вложенные циклы. Посмотрите, как будет работать программа 3(2(TRPR)3L) на конфигурации, когда все позиции заняты.</p>
    		<p>Программу можно запускать как в анимационном режиме, так и по шагам. Если понятно, как работает программа, то можно сразу посмотреть результат, нажав на кнопку мгновенного выполнения. Чем больше контейнеров будет перенесено в нужную часть, тем лучше. Если все контейнеры перенесены, то лучшим считается решение с меньшим числом команд в записи программы. Если и длина программ будет одинакова, то сравниваться решения будут по времени выполнения программы – числу шагов, сделанных краном при выполнении программы.</p>
    		<p>Лучшее решение сохраняется автоматически и к нему можно всегда вернуться, нажав кнопку загрузки рекорда.</p>
    		<p><b>На заметку учителю</b>. 1) Предложите решить аналогичную задачу с 4 контейнерами каждого цвета, но с дополнительным условием сохранения взаимного положения разноцветных контейнеров после переноса. Хотя программа отслеживать это ограничение не будет, результат легко проверить визуально, так как на экране остается исходная конфигурация. 2) Предложите ученикам устроить «бой программистов», в котором каждая команда представит свою конфигурацию (и короткую программу-ответ; обратите внимание, что составлять задачу можно от ответа – написать короткую программу с вложенными циклами и найти конфигурацию, на которой результат её работы будет интересным). Противники должны написать программу переноса контейнеров для данной конфигурации. Можно упростить задачу – предложив осуществить только погрузку (или только разгрузку) контейнеров.</p>
    	>>>,
    	"help2":<<<
    	    <p>Кнопки для выполнения команд имеют понятные логотипы. Программа имеет два режима: ручной и программный. В первом из них команды выполняются непосредственно при нажатии на кнопки действий. В программном режиме сначала пишется программа, в которой, кроме команд действий (T, P, R, L), используются скобки и числа, с помощью которых создаются циклические программы. Написанную программу можно выполнить, используя режим анимации или по шагам (причем выполнение шагов можно посмотреть и в обратном порядке). Если нужно исправить программу, то часть команд, начиная с последней, можно стереть, используя кнопку отмены последней команды. Также можно установить курсор в нужное место программы и внести новые команды.</p>
    		<p>Любые решения можно сохранять и загружать по мере надобности (обычно этим не пользуются, так как рекорд запоминается автоматически, а лучшие решения всех задач также собираются вместе автоматически при нажатии кнопки сохранения лучших результатов и анкеты).</p>
    			>>>

    ,
	"parse_errors": {
	    "unexpected_symbol": "неожиданный символ",
	    "unexpected_token": "неожиданное",
	    "unexpected_end": "неожиданный конец",
	    "digit_expected": "ожидается цифра",
	    "close_bracket_expected": "ожидается закрывающая скобка",
	    "number_too_big": "слишком больше число"
	},
	"exec_errors": {
	    "no_left": "движение влево невозможно",
	    "no_right": "движение вправо невозможно",
	    "occupied": "нельзя взять еще один блок",
	    "not_occupied": "нет блока, чтобы положить",
	    "nothing_to_take": "нет блоков, чтобы взять",
	    "nowhere_to_put": "нет места, чтобы положить",
	    "forbidden_order": "в этом порядке блоки класть нельзя"
	},
	"field_errors": {
        "left_blocks_fail": "Необходимо установить 10 блоков слева на трейлере",
        "right_blocks_fail": "Необходимо установить 10 блоков справа на площадке"
	},
	"buttons": {
	    "to_start": "В начало",
	    "clear": "Очистить",
	    "step_forward": "Шаг +",
	    "step_back": "Шаг -",
	    "to_end": "Мгновенно",
	    "to_end_0": "В конец",
        "go": "Запустить",
        "stop": "Остановить",
        "manual": "Вручную",
        "stop_manual": "Остановить"
	},
	"step": "Шаг:",
	"msg": {
	    "no_errors": "В программе нет ошибок",
	    "finish": "Программа завершилась",
	    "execution_error": "Ошибка крана:",
	    "parse_error": "Ошибка в программе:"
	}
}